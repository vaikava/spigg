// Generated by CoffeeScript 1.3.3
(function() {
  var spiggEntity, spiggMapper;

  spiggEntity = (function() {

    function spiggEntity(d, skipDefaults) {
      var _ref, _ref1;
      this.data = {};
      this.fields = (_ref = this.fields) != null ? _ref : {};
      this.default_val = (_ref1 = this.default_val) != null ? _ref1 : null;
      if (typeof this.init === 'function') {
        this.init();
      }
      if (this.defaults && !skipDefaults) {
        this._setDefaults();
      }
      if (d) {
        this._setObject(d);
      }
    }

    spiggEntity.prototype.get = function(k) {
      var _ref;
      if (!k) {
        return this.data;
      }
      if (~k.indexOf(".")) {
        return this._getDotNotated(k);
      }
      return (_ref = this.data[k]) != null ? _ref : this.default_val;
    };

    spiggEntity.prototype.set = function(k, v) {
      if (typeof k === 'object') {
        return this._setObject(k);
      }
      if (~k.indexOf(".")) {
        return this._setDotNotated(k, v);
      }
      return this._set(k, v);
    };

    spiggEntity.prototype.setUnsafe = function(k, v) {
      this.data[k] = v;
      return this;
    };

    spiggEntity.prototype.unset = function(k) {
      delete this.data[k];
      return this;
    };

    spiggEntity.prototype.reset = function() {
      this.data = {};
      this._setDefaults();
      return this;
    };

    spiggEntity.prototype.clear = function() {
      this.data = {};
      return this;
    };

    spiggEntity.prototype.toJSON = function() {
      return JSON.stringify(this.data);
    };

    spiggEntity.prototype.toString = function() {
      return JSON.stringify(this.data);
    };

    spiggEntity.prototype.toModifier = function(fn) {
      this.data = fn(this.data);
      return this;
    };

    spiggEntity.prototype._setDefaults = function() {
      var k, v, _ref;
      _ref = this.defaults;
      for (k in _ref) {
        v = _ref[k];
        this.data[k] = v;
      }
      return this;
    };

    spiggEntity.prototype._set = function(k, v) {
      var nv;
      nv = this._callCustomSetter(k, v);
      if (nv === false) {
        return null;
      } else {
        v = nv;
      }
      this.data[k] = v;
      return this.data = this._filter();
    };

    spiggEntity.prototype._setObject = function(o) {
      var k, v, _ref, _results;
      _ref = this._filter(o);
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(this._set(k, v));
      }
      return _results;
    };

    spiggEntity.prototype._callCustomSetter = function(k, v) {
      var method;
      method = '_set' + k.substr(0, 1).toUpperCase() + k.substr(1);
      if (typeof this[method] === 'function') {
        v = this[method](v, this.data);
      }
      return v;
    };

    spiggEntity.prototype._getDotNotated = function(k) {
      var walker;
      walker = function(o, i) {
        return o[i];
      };
      return k.split(".").reduce(walker, this.data);
    };

    spiggEntity.prototype._setDotNotated = function(k, v) {
      var arr, nv, walker, _k;
      arr = k.split(".");
      _k = arr[arr.length - 1];
      nv = this._callCustomSetter(arr.join("_"), v);
      if (nv === false) {
        return null;
      } else {
        v = nv;
      }
      walker = function(o, i) {
        if (i === _k) {
          o[i] = v;
        }
        return o[i];
      };
      arr.reduce(walker, this.data);
      return this.data = this._filter();
    };

    spiggEntity.prototype._filter = function(obj, fields) {
      var key, o;
      if (obj == null) {
        obj = this.data;
      }
      if (fields == null) {
        fields = this.fields;
      }
      o = {};
      if (Object.prototype.toString.call(obj) !== "[object Object]") {
        return obj;
      }
      for (key in obj) {
        if (fields[key]) {
          o[key] = this._filter(obj[key], fields[key]);
        }
      }
      return o;
    };

    /*
      _setChanged: (context) ->
        context.revision++
        md5 = crypto.createHash('md5').update(JSON.stringify context.data).digest("hex")
        context.revisions[context.revision] = context.data
        context.changed = true
    */


    return spiggEntity;

  })();

  module.exports.Entity = spiggEntity;

  spiggMapper = (function() {

    function spiggMapper() {}

    spiggMapper.prototype.isEntity = function(v) {
      var _ref;
      return (_ref = v instanceof spiggEntity) != null ? _ref : false;
    };

    return spiggMapper;

  })();

  module.exports.Mapper = spiggMapper;

}).call(this);
