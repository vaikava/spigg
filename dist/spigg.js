// Generated by CoffeeScript 1.3.3
(function() {
  var SpiggEntity, SpiggMapper, events;

  events = require("events");

  SpiggEntity = (function() {

    function SpiggEntity(d, noDefaults) {
      this.data = {};
      this.defaults = {};
      this.fields = {};
      this.setters = {};
      this.revisions = [];
      this.default_val = null;
      this.events = new events.EventEmitter();
      this.events.on("change", this._handleChange);
      if (typeof this.init === 'function') {
        this.init();
      }
      if (this.defaults && !noDefaults) {
        this.data = this._merge(this.defaults, {});
      }
      if (d) {
        this.set(d);
      }
    }

    SpiggEntity.prototype.get = function(k) {
      var _ref;
      if (!k) {
        return this.data;
      }
      if (~k.indexOf(".")) {
        return this._getDotNotated(k);
      }
      return (_ref = this.data[k]) != null ? _ref : this.default_val;
    };

    SpiggEntity.prototype.set = function(k, v) {
      var o;
      if (arguments.length === 2) {
        o = {};
        o[k] = v;
        k = o;
      }
      this.data = this._merge(this._filter(this._set(k, this.setters), this.fields), this.data);
      return this.events.emit("change", this);
    };

    SpiggEntity.prototype.setDefaultValue = function(v) {
      return this.default_val = v;
    };

    SpiggEntity.prototype.reset = function() {
      return this.data = this._merge(this.defaults, {});
    };

    SpiggEntity.prototype.clear = function() {
      return this.data = {};
    };

    SpiggEntity.prototype.unset = function(k) {
      delete this.data[k];
      return this;
    };

    SpiggEntity.prototype.getRevision = function(n) {
      var _ref;
      if (typeof n === "undefined") {
        return this.revisions;
      }
      if (n < 0) {
        return this.revisions[this.revisions.length + n + -1];
      }
      return (_ref = this.revisions[n]) != null ? _ref : {};
    };

    SpiggEntity.prototype.revisions = function() {
      return this.revisions.length;
    };

    SpiggEntity.prototype._getDotNotated = function(k) {
      var walker;
      walker = function(o, i) {
        return o[i];
      };
      return k.split(".").reduce(walker, this.data);
    };

    SpiggEntity.prototype._set = function(data, setters, val) {
      var key, o;
      if (val && typeof setters === 'function') {
        return setters(val);
      }
      o = {};
      for (key in data) {
        if (setters[key]) {
          o[key] = this._set(data[key], setters[key], data[key]);
        } else {
          o[key] = data[key];
        }
      }
      return o;
    };

    SpiggEntity.prototype._filter = function(obj, fields) {
      var key, o;
      if (obj == null) {
        obj = this.data;
      }
      if (fields == null) {
        fields = this.fields;
      }
      o = {};
      if (Object.prototype.toString.call(obj) !== "[object Object]") {
        return obj;
      }
      for (key in obj) {
        if (fields[key]) {
          o[key] = this._filter(obj[key], fields[key]);
        }
      }
      return o;
    };

    SpiggEntity.prototype._merge = function(a, b) {
      var k, v;
      for (k in a) {
        v = a[k];
        b[k] = v;
      }
      return b;
    };

    SpiggEntity.prototype._handleChange = function(context) {
      return context.revisions.push(context._merge(context.data, {}));
    };

    return SpiggEntity;

  })();

  SpiggMapper = (function() {

    function SpiggMapper() {}

    SpiggMapper.prototype.isEntity = function(v) {
      return v instanceof SpiggEntity;
    };

    SpiggMapper.prototype.hasData = function(v) {
      if (this.isEntity(v)) {
        return v.data;
      }
    };

    return SpiggMapper;

  })();

  module.exports.Entity = SpiggEntity;

  module.exports.Mapper = SpiggMapper;

}).call(this);
